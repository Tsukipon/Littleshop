openapi: "3.0.3"
info:
  title: "MyLittleShopping API"
  version: 0.0.1
paths:
  /admin:
    get:
      description: "Array of users with additionnal data"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/user"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
    description: "Get data for admin console"
    parameters:
      - in: query
        name: limit
        schema:
          type: integer
      - in: query
        name: offset
        schema:
          type: integer

  /cartProduct:
    get:
      description: "Get all data from a user cart"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/cartProduct"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
    description: "Array of products from cart"
    parameters:
      - in: query
        name: userId
        schema:
          type: integer

    post:
      description: "Allow a user to add a product added to his cart"
      responses:
        201:
          description: "Product added to CartProduct"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                productName:
                  type: string
                sellerUsername:
                  type: string
                quantity:
                  type: integer
              required:
                - productName
                - sellerUsername
                - quantity

    put:
      description: "Allow a user to modify a product from his cart"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                items:
                  allOf:
                    - $ref: "#/components/schemas/cartProduct"
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    delete:
      description: "Allow a user to delete a product from his cart"
      responses:
        200:
          description: "Product deleted from cart"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                productName:
                  type: string
                sellerUsername:
                  type: string
              required:
                - productName
                - sellerUsername

  /syncCart:
    get:
      description: "Refresh front for caching data"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/cartProduct"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
    description: "Array of products from cart with additionnal data"

  /orderProducts:
    get:
      description: "Get orders with separate logic for sellers and buyers"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/orderProduct"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

    post:
      description: "Allow the app to create an order when a user validate his cart"
      responses:
        201:
          description: "OrderProduct created"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                address1:
                  type: string
                address2:
                  type: string
              required:
                - address1
                - address2

    put:
      description: "Modify a product from the cart"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                items:
                  allOf:
                    - $ref: "#/components/schemas/orderProduct"
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ownerId:
                  type: integer
              required:
                - ownerId

  /syncOrder:
    get:
      description: "Refresh front for caching data"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/orderProduct"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

  /productCategories:
    get:
      description: "Get all categories for front-end"
      responses:
        200:
          description: "Get all categories for front-end"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/productCategory"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

  /productTags:
    get:
      description: "Get all tags for front-end"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/productTag"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

  /products:
    get:
      description: "Get all products data according to your role as a user"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/product"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
    parameters:
      - in: query
        name: condition
        schema:
          type: string
      - in: query
        name: category
        schema:
          type: string
      - in: query
        name: tag
        schema:
          type: string
      - in: query
        name: filter
        schema:
          type: string
      - in: query
        name: sellerUsername
        schema:
          type: string
      - in: query
        name: lowerPrice
        schema:
          type: number
          multipleOf: 0.01
      - in: query
        name: higherPrice
        schema:
          type: number
          multipleOf: 0.01

    post:
      description: "Allow a user to create a product for sell"
      responses:
        201:
          description: "Product created"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                label:
                  type: string
                condition:
                  type: string
                  enum: [new, renovated, occasion]
                description:
                  type: string
                unitPrice:
                  type: number
                  multipleOf: 0.01
                availableQuantity:
                  type: integer
              required:
                - name
                - label
                - condition
                - description
                - unitPrice
                - availableQuantity

    put:
      description: "Allow a seller to modify one of his products"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                items:
                  allOf:
                    - $ref: "#/components/schemas/product"
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                categories:
                  type: string
                tags:
                  type: string
    delete:
      description: "Allow a seller to delete one of his products"
      responses:
        200:
          description: "Product deleted"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              required:
                - name

  /ratingsProductsPerUser:
    get:
      description: "Get all ratings per user"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ratingProduct"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

    post:
      description: "Allow a user to publish a rating on a received product"
      responses:
        201:
          description: "Rating created"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                productId:
                  type: integer
                value:
                  type: integer
                  minimum: 0
                  maximum: 5
              required:
                - productId
                - value

  /userAddresses:
    get:
      description: "Get all addresses per user"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/userAddress"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

    post:
      description: "Allow a user to create an address for deliveries"
      responses:
        201:
          description: "Address created"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                address1:
                  type: integer
                address2:
                  type: string
                city:
                  type: string
                region:
                  type: string
                country:
                  type: string
                postalCode:
                  type: string
              required:
                - address1
                - address2
                - city
                - region
                - country
                - postalCode

    put:
      description: "Allow a user to modify one of his addresses"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                items:
                  allOf:
                    - $ref: "#/components/schemas/userAddress"
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                address1:
                  type: string
                address2:
                  type: string
                postalCode:
                  type: integer
                  multipleOf: 10000

    delete:
      description: "Allow a user to delete on of his addresses"
      responses:
        200:
          description: "Address deleted"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                address1:
                  type: string
                address2:
                  type: string
              required:
                - address1
                - address2

  /wishProducts:
    get:
      description: "Get all products per user wishlist"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/wishProduct"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

  /wishProduct:
    post:
      responses:
        201:
          description: "Product added to wishlist"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
                availableQuantity:
                  type: integer
              required:
                - productId
                - quantity
                - availableQuantity

    put:
      description: "Modify the quantity of a product in a wishlist"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                items:
                  allOf:
                    - $ref: "#/components/schemas/wishProduct"
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                sellerUsername:
                  type: string
                productName:
                  type: string
                quantity:
                  type: integer

    delete:
      description: "Allow a buyer to remove a product from his wishlist"
      responses:
        200:
          description: "Product deleted from wishlist"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                sellerUsername:
                  type: string
                productName:
                  type: string
              required:
                - sellerUsername
                - productName

  /userRole:
    get:
      description: "Get role for current user front side"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: string
                enum: ["buyer", "seller", "admin"]
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

  /login:
    post:
      description: "Allow a user to login"
      responses:
        201:
          description: "Logged in"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password

  /register:
    post:
      description: "Allow a user to create an account"
      responses:
        201:
          description: "Account created"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                birthdate:
                  type: string
                  format: date
                  description: Birthdate of current user
                  example: "2021-01-30"
                username:
                  type: string
              required:
                - email
                - password
                - firstname
                - birthdate
                - username

  /seller/register:
    post:
      description: "Admin route for seller user creation"
      responses:
        201:
          description: "Account created"
          content:
            text/plain:
              schema:
                type: string
        400:
          description: "Bad Json Format"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                birthdate:
                  type: string
                  format: date
                  description: Birthdate of current user
                  example: "2021-01-30"
                username:
                  type: string
              required:
                - email
                - password
                - firstname
                - birthdate
                - username
  /disable:
    put:
      description: "Admin route for user deactivation"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        200:
          description: "Account disabled"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

  /deactivate:
    put:
      description: "Allow a user to deactivate his profile"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        200:
          description: "Account disabled"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

  /syncAccount:
    get:
      description: "Refresh front for caching data"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/user"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []

components:
  schemas:
    cartProduct:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        product_id:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int64"
        shipped:
          type: string
          enum: ["preparation", "shipped", "delivered"]
        shippingDate:
          type: string
          format: date
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    orderProduct:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        owner_id:
          type: "integer"
          format: "int64"
        product_id:
          type: "integer"
          format: "int64"
        address_id:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int64"
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    userAddress:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        address1:
          type: "string"
        address2:
          type: "string"
        address3:
          type: "string"
        city:
          type: "string"
        region:
          type: "string"
        country:
          type: "string"
        postalCode:
          type: "integer"
          format: "int32"
          multipleOf: 10000
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    user:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        email:
          type: "string"
        firstname:
          type: "string"
        username:
          type: "string"
        lastname:
          type: "string"
        password:
          type: "string"
        birthdate:
          type: string
          format: date
        role:
          type: "string"
          description: "Role of a user"
          enum: ["buyer", "seller", "admin"]
        activated:
          type: "boolean"
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    product:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        label:
          type: "string"
        condition:
          type: "string"
          description: "Condition of a product"
          enum: ["new", "occasion", "renovated"]
        description:
          type: "string"
        unitPrice:
          type: "number"
          multipleOf: 0.01
        availableQuantity:
          type: "integer"
          format: "int64"
        sellerId:
          type: "integer"
          format: "int64"
        onSale:
          type: "boolean"
        averageRating:
          type: "integer"
          format: "int32"
          minimum: 0
          maximum: 5
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    productCategory:
      properties:
        id:
          type: "integer"
          format: "int64"
        productId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    productTag:
      properties:
        id:
          type: "integer"
          format: "int64"
        productId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    ratingProduct:
      properties:
        id:
          type: "integer"
          format: "int64"
        productId:
          type: "integer"
          format: "int64"
        ownerId:
          type: "integer"
          format: "int64"
        value:
          type: "integer"
          format: "int32"
          minimum: 0
          maximum: 5
        comment:
          type: "string"
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    wishProduct:
      properties:
        id:
          type: "integer"
          format: "int64"
        productId:
          type: "integer"
          format: "int64"
        ownerId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int64"
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
