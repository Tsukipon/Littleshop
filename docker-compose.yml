version: "3.7"
services:
  auth_db:
    deploy:
        mode: replicated
        replicas: 3
    image: postgres:latest
    ports:
      - "${AUTH_DB_PORT}:${AUTH_DB_PORT}"
    container_name: shop_auth_db
    environment:
      - PGPORT=${AUTH_DB_PORT}
      - DB_NAME=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - ./auth-db/db-data/:/var/lib/postgresql/data/
      #  - ./sql/authentication.sql:/docker-entrypoint-initdb.d/authentication.sql
      - ./sql/initialization.sql:/docker-entrypoint-initdb.d/initialization.sql
    restart: on-failure

  auth_db_test:
    image: postgres:latest
    ports:
      - "${AUTH_DB_TEST_PORT}:${AUTH_DB_TEST_PORT}"
    container_name: shop_auth_db_test
    environment:
      - PGPORT=${AUTH_DB_TEST_PORT}
      - DB_NAME=${DBTEST_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DBTEST_NAME}
    restart: on-failure

  inventory_db:
    deploy:
        mode: replicated
        replicas: 3
    image: postgres:latest
    ports:
      - "${INVENTORY_DB_PORT}:${INVENTORY_DB_PORT}"
    container_name: shop_inventory_db
    environment:
      - PGPORT=${INVENTORY_DB_PORT}
      - DB_NAME=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - ./inventory-db/db-data/:/var/lib/postgresql/data/
      #  - ./sql/inventory.sql:/docker-entrypoint-initdb.d/inventory.sql
      - ./sql/initialization.sql:/docker-entrypoint-initdb.d/initialization.sql
    restart: on-failure

  inventory_db_test:
    image: postgres:latest
    ports:
      - "${INVENTORY_DB_TEST_PORT}:${INVENTORY_DB_TEST_PORT}"
    container_name: shop_inventory_db_test
    environment:
      - PGPORT=${INVENTORY_DB_TEST_PORT}
      - DB_NAME=${DBTEST_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DBTEST_NAME}
    restart: on-failure

  order_db:
    deploy:
        mode: replicated
        replicas: 3
    image: postgres:latest
    ports:
      - "${ORDER_DB_PORT}:${ORDER_DB_PORT}"
    container_name: order_db
    environment:
      - PGPORT=${ORDER_DB_PORT}
      - DB_NAME=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - ./order-db/db-data/:/var/lib/postgresql/data/
      #  - ./sql/order.sql:/docker-entrypoint-initdb.d/order.sql
      - ./sql/initialization.sql:/docker-entrypoint-initdb.d/initialization.sql
    restart: on-failure

  order_db_test:
    image: postgres:latest
    ports:
      - "${ORDER_DB_TEST_PORT}:${ORDER_DB_TEST_PORT}"
    container_name: order_db_test
    environment:
      - PGPORT=${ORDER_DB_TEST_PORT}
      - DB_NAME=${DBTEST_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DBTEST_NAME}
    restart: on-failure

  aggregator:
    deploy:
      mode: replicated
      replicas: 4
    image: aggregator:latest
    build: 
      context: ./aggregator/
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    ports:
      - "${APP_AGGREGATOR_PORT}:${APP_AGGREGATOR_PORT}"
    environment:
      - APP_AGGREGATOR_PORT=${APP_AGGREGATOR_PORT}
      - NODE_ENV=${NODE_ENV}
      - DIALECT=${DIALECT}
      - JWT_SECRET=${JWT_SECRET}
      - DBTEST_NAME=${DBTEST_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    container_name: littleshop_aggregator
    depends_on:
      - auth_db
      - auth_db_test
      - inventory_db
      - inventory_db_test
      - order_db
      - order_db_test
      - authentication
      - inventory
      - mailer
      - orders
    restart: on-failure
    volumes:
      - ./aggregator:/aggregator

  authentication:
    deploy:
      mode: replicated
      replicas: 4
    image: authentication:latest
    build:
      context: ./authentication/
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    ports:
      - "${APP_AUTHENTICATION_PORT}:${APP_AUTHENTICATION_PORT}"

    environment:
      - APP_AUTHENTICATION_PORT=${APP_AUTHENTICATION_PORT}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - DIALECT=${DIALECT}
      - DB_NAME=${DB_NAME}
      - DBTEST_NAME=${DBTEST_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - AUTH_DB_HOST=${AUTH_DB_HOST}
      - AUTH_DB_PORT=${AUTH_DB_PORT}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - BUYER_PASSWORD=${BUYER_PASSWORD}
      - SELLER_PASSWORD=${SELLER_PASSWORD}
      - PASSWORD_SECRET=${PASSWORD_SECRET}
    container_name: shop_authentication
    depends_on:
      - auth_db
      - auth_db_test
    restart: on-failure
    volumes:
      - ./authentication:/authentication

  inventory:
    deploy:
        mode: replicated
        replicas: 3
    image: inventory:latest
    build:
      context: ./inventory/
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    ports:
      - "${APP_INVENTORY_PORT}:${APP_INVENTORY_PORT}"
    environment:
      - APP_INVENTORY_PORT=${APP_INVENTORY_PORT}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - DIALECT=${DIALECT}
      - DB_NAME=${DB_NAME}
      - DBTEST_NAME=${DBTEST_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - INVENTORY_DB_HOST=${INVENTORY_DB_HOST}
      - INVENTORY_DB_TEST_HOST=${INVENTORY_DB_TEST_HOST}
      - INVENTORY_DB_PORT=${INVENTORY_DB_PORT}
      - INVENTORY_DB_TEST_PORT=${INVENTORY_DB_TEST_PORT}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - PASSWORD_SECRET=${PASSWORD_SECRET}
    container_name: shop_inventory
    depends_on:
      - inventory_db
      - inventory_db_test
    restart: on-failure
    volumes:
      - ./inventory:/inventory

  mailer:
    image: mailer:latest
    build: ./mailer/
    ports:
      - "${APP_MAILER_PORT}:${APP_MAILER_PORT}"
    environment:
      - APP_MAILER_PORT=${APP_MAILER_PORT}
      - APP_MAILER_USER=${APP_MAILER_USER}
      - APP_MAILER_PASSWORD=${APP_MAILER_PASSWORD}
      - NODE_ENV=${NODE_ENV}
      - DIALECT=${DIALECT}
      - JWT_SECRET=${JWT_SECRET}
    container_name: shop_mailer
    depends_on:
      - auth_db
    restart: on-failure
    volumes:
      - ./mailer:/mailer

  orders:
    deploy:
        mode: replicated
        replicas: 3
    image: orders:latest
    build:
      context: ./orders/
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    ports:
      - "${APP_ORDER_PORT}:${APP_ORDER_PORT}"
    environment:
      - APP_ORDER_PORT=${APP_ORDER_PORT}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - DIALECT=${DIALECT}
      - DB_NAME=${DB_NAME}
      - DBTEST_NAME=${DBTEST_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - ORDER_DB_HOST=${ORDER_DB_HOST}
      - ORDER_DB_TEST_HOST=${ORDER_DB_TEST_HOST}
      - ORDER_DB_PORT=${ORDER_DB_PORT}
      - ORDER_DB_TEST_PORT=${ORDER_DB_TEST_PORT}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - PASSWORD_SECRET=${PASSWORD_SECRET}
    container_name: shop_order
    depends_on:
      - order_db
      - order_db_test
    restart: on-failure
    volumes:
      - ./orders:/orders

  web:
    image: web:latest
    build: ./web/littleshop/
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_AGGREGATOR_PORT=${APP_AGGREGATOR_PORT}
    ports:
      - "${WEB_FRONT_PORT}:${PORT}"
    container_name: shop_web
    depends_on:
      - aggregator
    restart: on-failure
    volumes:
      - ./web/:/web/
